/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as CoursesRouteImport } from './routes/courses'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CoursesCourseIdRouteImport } from './routes/courses.$courseId'

const CoursesRoute = CoursesRouteImport.update({
  id: '/courses',
  path: '/courses',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CoursesCourseIdRoute = CoursesCourseIdRouteImport.update({
  id: '/$courseId',
  path: '/$courseId',
  getParentRoute: () => CoursesRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/courses': typeof CoursesRouteWithChildren
  '/courses/$courseId': typeof CoursesCourseIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/courses': typeof CoursesRouteWithChildren
  '/courses/$courseId': typeof CoursesCourseIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/courses': typeof CoursesRouteWithChildren
  '/courses/$courseId': typeof CoursesCourseIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/courses' | '/courses/$courseId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/courses' | '/courses/$courseId'
  id: '__root__' | '/' | '/courses' | '/courses/$courseId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CoursesRoute: typeof CoursesRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/courses': {
      id: '/courses'
      path: '/courses'
      fullPath: '/courses'
      preLoaderRoute: typeof CoursesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/courses/$courseId': {
      id: '/courses/$courseId'
      path: '/$courseId'
      fullPath: '/courses/$courseId'
      preLoaderRoute: typeof CoursesCourseIdRouteImport
      parentRoute: typeof CoursesRoute
    }
  }
}

interface CoursesRouteChildren {
  CoursesCourseIdRoute: typeof CoursesCourseIdRoute
}

const CoursesRouteChildren: CoursesRouteChildren = {
  CoursesCourseIdRoute: CoursesCourseIdRoute,
}

const CoursesRouteWithChildren =
  CoursesRoute._addFileChildren(CoursesRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CoursesRoute: CoursesRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
