/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CoursesIndexRouteImport } from './routes/courses.index'
import { Route as AssignmentsIndexRouteImport } from './routes/assignments.index'
import { Route as CoursesCourseIdRouteImport } from './routes/courses.$courseId'
import { Route as AssignmentsAssignmentIdRouteImport } from './routes/assignments.$assignmentId'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CoursesIndexRoute = CoursesIndexRouteImport.update({
  id: '/courses/',
  path: '/courses/',
  getParentRoute: () => rootRouteImport,
} as any)
const AssignmentsIndexRoute = AssignmentsIndexRouteImport.update({
  id: '/assignments/',
  path: '/assignments/',
  getParentRoute: () => rootRouteImport,
} as any)
const CoursesCourseIdRoute = CoursesCourseIdRouteImport.update({
  id: '/courses/$courseId',
  path: '/courses/$courseId',
  getParentRoute: () => rootRouteImport,
} as any)
const AssignmentsAssignmentIdRoute = AssignmentsAssignmentIdRouteImport.update({
  id: '/assignments/$assignmentId',
  path: '/assignments/$assignmentId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/assignments/$assignmentId': typeof AssignmentsAssignmentIdRoute
  '/courses/$courseId': typeof CoursesCourseIdRoute
  '/assignments': typeof AssignmentsIndexRoute
  '/courses': typeof CoursesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/assignments/$assignmentId': typeof AssignmentsAssignmentIdRoute
  '/courses/$courseId': typeof CoursesCourseIdRoute
  '/assignments': typeof AssignmentsIndexRoute
  '/courses': typeof CoursesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/assignments/$assignmentId': typeof AssignmentsAssignmentIdRoute
  '/courses/$courseId': typeof CoursesCourseIdRoute
  '/assignments/': typeof AssignmentsIndexRoute
  '/courses/': typeof CoursesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/assignments/$assignmentId'
    | '/courses/$courseId'
    | '/assignments'
    | '/courses'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/assignments/$assignmentId'
    | '/courses/$courseId'
    | '/assignments'
    | '/courses'
  id:
    | '__root__'
    | '/'
    | '/assignments/$assignmentId'
    | '/courses/$courseId'
    | '/assignments/'
    | '/courses/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AssignmentsAssignmentIdRoute: typeof AssignmentsAssignmentIdRoute
  CoursesCourseIdRoute: typeof CoursesCourseIdRoute
  AssignmentsIndexRoute: typeof AssignmentsIndexRoute
  CoursesIndexRoute: typeof CoursesIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/courses/': {
      id: '/courses/'
      path: '/courses'
      fullPath: '/courses'
      preLoaderRoute: typeof CoursesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/assignments/': {
      id: '/assignments/'
      path: '/assignments'
      fullPath: '/assignments'
      preLoaderRoute: typeof AssignmentsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/courses/$courseId': {
      id: '/courses/$courseId'
      path: '/courses/$courseId'
      fullPath: '/courses/$courseId'
      preLoaderRoute: typeof CoursesCourseIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/assignments/$assignmentId': {
      id: '/assignments/$assignmentId'
      path: '/assignments/$assignmentId'
      fullPath: '/assignments/$assignmentId'
      preLoaderRoute: typeof AssignmentsAssignmentIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AssignmentsAssignmentIdRoute: AssignmentsAssignmentIdRoute,
  CoursesCourseIdRoute: CoursesCourseIdRoute,
  AssignmentsIndexRoute: AssignmentsIndexRoute,
  CoursesIndexRoute: CoursesIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
